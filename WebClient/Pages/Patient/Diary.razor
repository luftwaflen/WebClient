@page "/diary"
@using System.Security.Claims
@using Blazored.Modal.Services
@using Microsoft.AspNetCore.Components.Authorization
@using WebClient.Models
@using WebClient.Pages.Admin
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<AuthorizeView>
    <Authorized>
        <div class="d-flex flex-column align-items-center">
            <button class="btn btn-primary mb-3" @onclick="ShowModal">Создать запись</button>
    
            <div>
                @if (DiaryNotes == null)
                {
                    <p><em>Загрузка...</em></p>
                }
                else
                {
                    @foreach (var diaryNote in DiaryNotes)
                    {
                        <div class="card w-70 mb-3">
                            <div class="card-body">
                                <table class="table table-bordered table-responsive">
                                    <thead>
                                    <tr>
                                        <th>Дата</th>
                                        <th>Давление</th>
                                        <th>Пульс</th>
                                        <th>Описание</th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    <tr>
                                        <td>@diaryNote.Date</td>
                                        <td>@diaryNote.PressureSYS\@diaryNote.PressureDIA</td>
                                        <td>@diaryNote.Pulse</td>
                                        <td>@diaryNote.Description</td>
                                    </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    public List<DiaryNote> DiaryNotes { get; set; }
    public DiaryNote NewDiaryNote { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var id = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;

        DiaryNotes = await GetDiary(id);

        if (user.Identity.IsAuthenticated)
        {
            // User is authenticated
        }
        else
        {
            // User is not authenticated, redirect to login page
            NavigationManager.NavigateTo("login");
        }
    }

    public async Task<List<DiaryNote>> GetDiary(string id)
    {
        var response = await Http.GetAsync($"https://localhost:7270/Api/Patient/GetDiary?patientId={id}");
        var data = await response.Content.ReadFromJsonAsync<List<DiaryNote>>();

        return data;
    }

    private async Task ShowModal()
    {
        var messageForm = Modal.Show<CreateDiaryModal>("Создать запись");
        var result = await messageForm.Result;

        if (result.Confirmed)
        {
            var message = result.Data.ToString();
        }
    }
}
