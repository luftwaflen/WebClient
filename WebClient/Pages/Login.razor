@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using WebClient.Requests
@using WebClient.Responses
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http;


<div class="d-flex justify-content-center align-items-center" style="min-height: 100vh;">
    <div class="border p-4 rounded" style="width: 100%; max-width: 400px;">
        <EditForm FormName="loginForm" Model="@LoginRequest" OnValidSubmit="@LoginUser">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="login">Логин</label>
                <InputText class="form-control" id="login" @bind-Value="@LoginRequest.Login" />
                <ValidationMessage For="@(() => LoginRequest.Login)" />
            </div>

            <div class="mb-3">
                <label for="password">Пароль</label>
                <InputText class="form-control" id="password" type="password" @bind-Value="@LoginRequest.Password" />
                <ValidationMessage For="@(() => LoginRequest.Password)" />
            </div>
            <div>
                <button class="btn btn-primary" FormName="loginForm" type="submit">Вход</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [SupplyParameterFromForm] public LoginRequest? LoginRequest { get; set; }

    public AuthenticationState User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LoginRequest ??= new LoginRequest();
    }

    private async void LoginUser()
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7270/Api/User/Login", LoginRequest);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadFromJsonAsync<TokenResponse>();
            await localStorage.SetItemAsync("jwt-token", token.Token);
            User = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            // var tokenHandler = new JwtSecurityTokenHandler();
            // var jwtToken = tokenHandler.ReadJwtToken(token.Token);

            // var identity = new ClaimsIdentity(jwtToken.Claims, "jwt");
            // var user = new ClaimsPrincipal(identity);

            var role = User.User.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;

            switch (role)
            {
                case "Admin":
                {
                    Navigation.NavigateTo("/users", true);
                }
                    break;
                case "Doctor":
                {
                    Navigation.NavigateTo("/doctor-patients", true);
                }
                    break;
                case "Patient":
                {
                    Navigation.NavigateTo("/patient-main", true);
                }
                    break;
                default:
                    Navigation.NavigateTo(Navigation.Uri, true);
                    break;
            }
        }
        else
        {
            // Обработка ошибки
            Console.WriteLine("Login failed");
        }
    }
}